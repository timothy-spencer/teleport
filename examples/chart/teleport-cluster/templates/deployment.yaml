apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
  {{- if .Values.annotations.deployment }}
  annotations:
    {{- toYaml .Values.annotations.deployment | nindent 4 }}
  {{- end }}
spec:
  {{- if not (eq .Values.chartMode "standalone") }}
  replicas: {{ .Values.highAvailability.replicaCount }}
  {{- else }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        # ConfigMap checksum, to recreate the pod on config changes.
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
{{- if .Values.annotations.pod }}
  {{- toYaml .Values.annotations.pod | nindent 8 }}
{{- end }}
      labels:
        app: {{ .Release.Name }}
    spec:
      {{- if and (gt (int .Values.highAvailability.replicaCount) 1) (not (eq .Values.chartMode "standalone")) }}
      affinity:
        podAntiAffinity:
          {{- if .Values.highAvailability.requireAntiAffinity }}
          requiredDuringSchedulingIgnoredDuringExecution:
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- end }}
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
{{- if .Values.initContainers }}
      initContainers: {{- toYaml .Values.initContainers | nindent 6 }}
  {{- if .Values.resources }}
        resources:
    {{- toYaml .Values.resources | nindent 10 }}
  {{- end }}
        volumeMounts:
  {{- if .Values.enterprise }}
        - mountPath: /var/lib/license
          name: "license"
          readOnly: true
  {{- end }}
  {{- if eq .Values.chartMode "gcp" }}
        - mountPath: /etc/teleport-secrets
          name: "gcp-credentials"
          readOnly: true
  {{- end }}
        - mountPath: /etc/teleport
          name: "config"
          readOnly: true
        - mountPath: /var/lib/teleport
          name: "data"
  {{- if .Values.extraVolumeMounts }}
    {{- toYaml .Values.extraVolumeMounts | nindent 8 }}
  {{- end }}
{{- end }}
      containers:
      - name: "teleport"
        image: "{{ if .Values.enterprise }}{{ .Values.enterpriseImage }}{{ else }}{{ .Values.image }}{{ end }}:{{ if .Values.teleportVersionOverride }}{{ .Values.teleportVersionOverride }}{{ else }}{{ .Chart.Version }}{{ end }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        args:
        - "--diag-addr=0.0.0.0:3000"
        {{- if .Values.insecureSkipProxyTLSVerify }}
        - "--insecure"
        {{- end }}
        {{- if .Values.extraArgs }}
          {{- toYaml .Values.extraArgs | nindent 8 }}
        {{- end }}
        ports:
        - name: diag
          containerPort: 3000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: diag
          initialDelaySeconds: 5 # wait 5s for agent to start
          periodSeconds: 5 # poll health every 5s
          failureThreshold: 6 # consider agent unhealthy after 30s (6 * 5s)
        readinessProbe:
          httpGet:
            path: /readyz
            port: diag
          initialDelaySeconds: 5 # wait 5s for agent to register
          periodSeconds: 5 # poll health every 5s
          failureThreshold: 12 # consider agent unhealthy after 60s (12 * 5s)
{{- if .Values.resources }}
        resources:
  {{- toYaml .Values.resources | nindent 10 }}
{{- end }}
        volumeMounts:
{{- if .Values.enterprise }}
        - mountPath: /var/lib/license
          name: "license"
          readOnly: true
{{- end }}
{{- if eq .Values.chartMode "gcp" }}
        - mountPath: /etc/teleport-secrets
          name: "gcp-credentials"
          readOnly: true
{{- end }}
{{- if .Values.highAvailability.certManager.enabled }}
        - mountPath: /etc/teleport-tls
          name: "teleport-tls"
          readOnly: true
{{- end }}
        - mountPath: /etc/teleport
          name: "config"
          readOnly: true
        - mountPath: /var/lib/teleport
          name: "data"
{{- if .Values.extraVolumeMounts }}
  {{- toYaml .Values.extraVolumeMounts | nindent 8 }}
{{- end }}
      volumes:
{{- if .Values.enterprise }}
      - name: license
        secret:
          secretName: "license"
{{- end }}
{{- if .Values.gcp.credentialSecretName }}
      - name: gcp-credentials
        secret:
          secretName: {{ required "gcp.credentialSecretName is required in chart values" .Values.gcp.credentialSecretName }}
{{- end }}
{{- if .Values.highAvailability.certManager.enabled }}
      - name: teleport-tls
        secret:
          secretName: teleport-tls
{{- end }}
      - name: "config"
        configMap:
          name: {{ .Release.Name }}
      - name: "data"
        {{- if eq .Values.chartMode "standalone" }}
        persistentVolumeClaim:
          claimName: {{ if .Values.standalone.existingClaimName }}{{ .Values.standalone.existingClaimName }}{{ else }}{{ .Release.Name }}{{ end }}
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- if .Values.extraVolumes }}
  {{- toYaml .Values.extraVolumes | nindent 6 }}
{{- end }}
      serviceAccountName: {{ .Release.Name }}
